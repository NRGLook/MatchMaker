from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes

from sqlalchemy.exc import SQLAlchemyError

from src.config.database_config import get_async_session
from src.models.database_models import User
from src.functionality.user.schemes import UserSchema
from src.utils.helpers import convert_telegram_id_to_uuid


FIRST_NAME, LAST_NAME, AGE, EXPERIENCE, SHOW_GRID, VIEW_PROFILE, EDIT_PROFILE = range(7)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°—Ç–∞—Ä—Ç–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞—á–∞–ª–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö."""
    user_id = convert_telegram_id_to_uuid(update.effective_user.id)

    async with get_async_session() as session:
        user = await session.get(User, user_id)
        if user and (user.first_name or user.last_name or user.age or user.experience):
            welcome_text = (
                "–ü—Ä–∏–≤–µ—Ç! –¢—ã —É–∂–µ –∑–∞–ø–æ–ª–Ω–∏–ª —á–∞—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö. –•–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —à–∞–≥–∏?"
            )
            keyboard = [
                [InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö", callback_data="skip_input")],
                [InlineKeyboardButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="edit_profile")],
            ]
        else:
            welcome_text = (
                "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å.\n"
                "–î–ª—è –Ω–∞—á–∞–ª–∞, –¥–∞–≤–∞–π –≤–≤–µ–¥–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã—Ö.\n"
                "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!"
            )
            keyboard = [
                [InlineKeyboardButton("–ù–∞—á–∞—Ç—å –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö", callback_data="start_input")],
            ]

    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(welcome_text, reply_markup=reply_markup)
    return FIRST_NAME


async def button_click(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –ø—Ä–æ–ø—É—Å–∫–∞."""
    query = update.callback_query
    await query.answer()

    if query.data == "start_input":
        await query.edit_message_text(text="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
        context.user_data["field"] = "first_name"
        return FIRST_NAME

    elif query.data == "skip_input":
        return await show_grid(update, context)

    elif query.data == "edit_profile":
        return await show_grid(update, context)


async def handle_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."""
    field = context.user_data.get("field")
    if not field:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –ø–æ–ª–µ.")
        return FIRST_NAME

    value = update.message.text

    async with get_async_session() as session:
        try:
            user_id = convert_telegram_id_to_uuid(update.effective_user.id)

            user = await session.get(User, user_id)

            if not user:
                user = User(id=user_id, username=update.effective_user.username)
                session.add(user)

            user_data = {field: value}
            validated_data = UserSchema(**user_data)

            setattr(user, field, validated_data.dict()[field])
            await session.commit()

            if field == "first_name":
                await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:")
                context.user_data["field"] = "last_name"
                return LAST_NAME

            if field == "last_name":
                await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:")
                context.user_data["field"] = "age"
                return AGE

            if field == "age":
                await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã:")
                context.user_data["field"] = "experience"
                return EXPERIENCE

            if field == "experience":
                await update.message.reply_text("–í—Å–µ –¥–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.")
                return await show_grid(update, context)

        except (ValueError, SQLAlchemyError) as e:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            await session.rollback()

    return FIRST_NAME


async def show_grid(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–µ—Ç–∫–∏ –∫–Ω–æ–ø–æ–∫ –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ '–ú–µ–Ω—é'."""
    query = update.callback_query
    await query.answer()

    keyboard = [
        [InlineKeyboardButton(f"–Ø—á–µ–π–∫–∞ {i+1}", callback_data=f"cell_{i+1}") for i in range(4)],
        [InlineKeyboardButton(f"–Ø—á–µ–π–∫–∞ {i+5}", callback_data=f"cell_{i+5}") for i in range(4)],
        [InlineKeyboardButton("–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="view_profile"),
         InlineKeyboardButton("–ú–µ–Ω—é", callback_data="menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.message.reply_text("–í–∞—à–∏ –¥–µ–π—Å—Ç–≤–∏—è:", reply_markup=reply_markup)
    return SHOW_GRID


async def handle_grid_action(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –Ω–∞ —Å–µ—Ç–∫–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è –∏ –≤–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é)."""
    query = update.callback_query
    await query.answer()

    if query.data == "view_profile":
        async with get_async_session() as session:
            user_id = convert_telegram_id_to_uuid(update.effective_user.id)
            user = await session.get(User, user_id)

            if user:
                profile = (
                    f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n"
                    f"–ò–º—è: {user.first_name}\n"
                    f"–§–∞–º–∏–ª–∏—è: {user.last_name}\n"
                    f"–í–æ–∑—Ä–∞—Å—Ç: {user.age}\n"
                    f"–û–ø—ã—Ç: {user.experience}\n"
                )
                await query.message.edit_text(profile)
            else:
                await query.message.edit_text("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    elif query.data == "menu":
        await query.message.edit_text("–ú–µ–Ω—é:\n1. –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å\n2. –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")
        await query.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å: \n"
            "1. –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è\n"
            "2. –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è"
        )
        return SHOW_GRID
    else:
        await query.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {query.data}")
