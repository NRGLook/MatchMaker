from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    ConversationHandler,
    filters,
)
from sqlalchemy.exc import SQLAlchemyError

from src.config.app_config import settings
from src.config.database_config import get_async_session
from src.models.database_models import User

import uuid

CHOOSING, TYPING, SHOW_GRID = range(3)


def convert_telegram_id_to_uuid(telegram_id: int) -> uuid.UUID:
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã–π Telegram ID –≤ UUID."""
    return uuid.UUID(int=telegram_id, version=4)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°—Ç–∞—Ä—Ç–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫: –≤—ã–≤–æ–¥ –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–µ–π –ø—Ä–æ—Ñ–∏–ª—è."""
    keyboard = [
        [InlineKeyboardButton("–ò–º—è", callback_data="first_name"),
         InlineKeyboardButton("–§–∞–º–∏–ª–∏—è", callback_data="last_name")],
        [InlineKeyboardButton("–í–æ–∑—Ä–∞—Å—Ç", callback_data="age"),
         InlineKeyboardButton("–û–ø—ã—Ç", callback_data="experience")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:", reply_markup=reply_markup)
    return CHOOSING


async def button_click(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏: –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –ø–æ–ª–µ."""
    query = update.callback_query
    await query.answer()
    context.user_data["field"] = query.data
    await query.edit_message_text(text=f"–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {query.data}:")
    return TYPING


async def handle_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."""
    field = context.user_data.get("field")
    if not field:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –ø–æ–ª–µ.")
        return CHOOSING

    value = update.message.text

    async with get_async_session() as session:
        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Telegram ID –≤ UUID
            user_id = convert_telegram_id_to_uuid(update.effective_user.id)

            # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
            user = await session.get(User, user_id)

            if not user:
                user = User(id=user_id, username=update.effective_user.username)
                session.add(user)

            if field in ["age", "experience"]:
                value = int(value)

            setattr(user, field, value)
            await session.commit()

            await update.message.reply_text(f"{field} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {value}.")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –ª–∏ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            if all([user.first_name, user.last_name, user.age, user.experience]):
                await update.message.reply_text("–í—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã. –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–µ—Ç–∫–µ.")
                return await show_grid(update, context)
            else:
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –≤—ã–±–æ—Ä—É —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–ª—è
                return await start(update, context)

        except (ValueError, SQLAlchemyError) as e:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            await session.rollback()

    return CHOOSING


async def show_grid(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–µ—Ç–∫–∏ –∫–Ω–æ–ø–æ–∫."""
    keyboard = [
        [InlineKeyboardButton(f"–Ø—á–µ–π–∫–∞ {i+1}", callback_data=f"cell_{i+1}") for i in range(4)],
        [InlineKeyboardButton(f"–Ø—á–µ–π–∫–∞ {i+5}", callback_data=f"cell_{i+5}") for i in range(4)],
        [InlineKeyboardButton("–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="view_profile")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í–∞—à–∏ –¥–µ–π—Å—Ç–≤–∏—è:", reply_markup=reply_markup)
    return SHOW_GRID


async def handle_grid_action(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –Ω–∞ —Å–µ—Ç–∫–µ."""
    query = update.callback_query
    await query.answer()

    if query.data == "view_profile":
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        async with get_async_session() as session:
            user_id = convert_telegram_id_to_uuid(update.effective_user.id)
            user = await session.get(User, user_id)

            if user:
                profile = (
                    f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n"
                    f"–ò–º—è: {user.first_name}\n"
                    f"–§–∞–º–∏–ª–∏—è: {user.last_name}\n"
                    f"–í–æ–∑—Ä–∞—Å—Ç: {user.age}\n"
                    f"–û–ø—ã—Ç: {user.experience}\n"
                )
                await query.edit_message_text(profile)
            else:
                await query.edit_message_text("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    else:
        await query.edit_message_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {query.data}")


def main():
    TOKEN = settings.API_KEY

    app = Application.builder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            CHOOSING: [CallbackQueryHandler(button_click)],
            TYPING: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_input)],
            SHOW_GRID: [CallbackQueryHandler(handle_grid_action)],
        },
        fallbacks=[],
    )

    app.add_handler(conv_handler)
    app.run_polling()


if __name__ == "__main__":
    main()
